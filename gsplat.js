class F{constructor(F=0,U=0,l=0){this.x=F,this.y=U,this.z=l}equals(F){return this.x===F.x&&(this.y===F.y&&this.z===F.z)}add(U){return"number"==typeof U?new F(this.x+U,this.y+U,this.z+U):new F(this.x+U.x,this.y+U.y,this.z+U.z)}subtract(U){return"number"==typeof U?new F(this.x-U,this.y-U,this.z-U):new F(this.x-U.x,this.y-U.y,this.z-U.z)}multiply(U){return"number"==typeof U?new F(this.x*U,this.y*U,this.z*U):new F(this.x*U.x,this.y*U.y,this.z*U.z)}lerp(U,l){return new F(this.x+(U.x-this.x)*l,this.y+(U.y-this.y)*l,this.z+(U.z-this.z)*l)}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}distanceTo(F){return Math.sqrt((this.x-F.x)**2+(this.y-F.y)**2+(this.z-F.z)**2)}normalize(){const U=this.length();return new F(this.x/U,this.y/U,this.z/U)}flat(){return[this.x,this.y,this.z]}clone(){return new F(this.x,this.y,this.z)}}class U{constructor(F=0,U=0,l=0,t=1){this.x=F,this.y=U,this.z=l,this.w=t}equals(F){return this.x===F.x&&(this.y===F.y&&(this.z===F.z&&this.w===F.w))}normalize(){const F=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return new U(this.x/F,this.y/F,this.z/F,this.w/F)}multiply(F){const l=this.w,t=this.x,V=this.y,Z=this.z,d=F.w,Q=F.x,n=F.y,R=F.z;return new U(l*Q+t*d+V*R-Z*n,l*n-t*R+V*d+Z*Q,l*R+t*n-V*Q+Z*d,l*d-t*Q-V*n-Z*R)}flat(){return[this.x,this.y,this.z,this.w]}clone(){return new U(this.x,this.y,this.z,this.w)}static FromEuler(F){const l=F.x/2,t=F.y/2,V=F.z/2,Z=Math.cos(t),d=Math.sin(t),Q=Math.cos(l),n=Math.sin(l),R=Math.cos(V),W=Math.sin(V);return new U(Z*n*R+d*Q*W,d*Q*R-Z*n*W,Z*Q*W-d*n*R,Z*Q*R+d*n*W)}toEuler(){const U=2*(this.w*this.x+this.y*this.z),l=1-2*(this.x*this.x+this.y*this.y),t=Math.atan2(U,l);let V;const Z=2*(this.w*this.y-this.z*this.x);V=Math.abs(Z)>=1?Math.sign(Z)*Math.PI/2:Math.asin(Z);const d=2*(this.w*this.z+this.x*this.y),Q=1-2*(this.y*this.y+this.z*this.z),n=Math.atan2(d,Q);return new F(t,V,n)}static FromMatrix3(F){const l=F.buffer,t=l[0]+l[4]+l[8];let V,Z,d,Q;if(t>0){const F=.5/Math.sqrt(t+1);Q=.25/F,V=(l[7]-l[5])*F,Z=(l[2]-l[6])*F,d=(l[3]-l[1])*F}else if(l[0]>l[4]&&l[0]>l[8]){const F=2*Math.sqrt(1+l[0]-l[4]-l[8]);Q=(l[7]-l[5])/F,V=.25*F,Z=(l[1]+l[3])/F,d=(l[2]+l[6])/F}else if(l[4]>l[8]){const F=2*Math.sqrt(1+l[4]-l[0]-l[8]);Q=(l[2]-l[6])/F,V=(l[1]+l[3])/F,Z=.25*F,d=(l[5]+l[7])/F}else{const F=2*Math.sqrt(1+l[8]-l[0]-l[4]);Q=(l[3]-l[1])/F,V=(l[2]+l[6])/F,Z=(l[5]+l[7])/F,d=.25*F}return new U(V,Z,d,Q)}}class l{constructor(){const F=new Map;this.addEventListener=(U,l)=>{F.has(U)||F.set(U,new Set),F.get(U).add(l)},this.removeEventListener=(U,l)=>{F.has(U)&&F.get(U).delete(l)},this.hasEventListener=(U,l)=>!!F.has(U)&&F.get(U).has(l),this.dispatchEvent=U=>{if(F.has(U.type))for(const l of F.get(U.type))l(U)}}}class t extends l{constructor(){super(),this._position=new F,this._rotation=new U,this._changeEvent={type:"change"}}get position(){return this._position}set position(F){this._position.equals(F)||(this._position=F,this.dispatchEvent(this._changeEvent))}get rotation(){return this._rotation}set rotation(F){this._rotation.equals(F)||(this._rotation=F,this.dispatchEvent(this._changeEvent))}}class V{constructor(F=1,U=0,l=0,t=0,V=1,Z=0,d=0,Q=0,n=1){this.buffer=[F,U,l,t,V,Z,d,Q,n]}equals(F){if(this.buffer.length!==F.buffer.length)return!1;if(this.buffer===F.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==F.buffer[U])return!1;return!0}multiply(F){const U=this.buffer,l=F.buffer;return new V(l[0]*U[0]+l[3]*U[1]+l[6]*U[2],l[1]*U[0]+l[4]*U[1]+l[7]*U[2],l[2]*U[0]+l[5]*U[1]+l[8]*U[2],l[0]*U[3]+l[3]*U[4]+l[6]*U[5],l[1]*U[3]+l[4]*U[4]+l[7]*U[5],l[2]*U[3]+l[5]*U[4]+l[8]*U[5],l[0]*U[6]+l[3]*U[7]+l[6]*U[8],l[1]*U[6]+l[4]*U[7]+l[7]*U[8],l[2]*U[6]+l[5]*U[7]+l[8]*U[8])}clone(){const F=this.buffer;return new V(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8])}static Eye(F=1){return new V(F,0,0,0,F,0,0,0,F)}static Diagonal(F){return new V(F.x,0,0,0,F.y,0,0,0,F.z)}static RotationFromQuaternion(F){return new V(1-2*F.y*F.y-2*F.z*F.z,2*F.x*F.y-2*F.z*F.w,2*F.x*F.z+2*F.y*F.w,2*F.x*F.y+2*F.z*F.w,1-2*F.x*F.x-2*F.z*F.z,2*F.y*F.z-2*F.x*F.w,2*F.x*F.z-2*F.y*F.w,2*F.y*F.z+2*F.x*F.w,1-2*F.x*F.x-2*F.y*F.y)}static RotationFromEuler(F){const U=Math.cos(F.x),l=Math.sin(F.x),t=Math.cos(F.y),Z=Math.sin(F.y),d=Math.cos(F.z),Q=Math.sin(F.z);return new V(...[t*d+Z*l*Q,-t*Q+Z*l*d,Z*U,U*Q,U*d,-l,-Z*d+t*l*Q,Z*Q+t*l*d,t*U])}}class Z{constructor(F=1,U=0,l=0,t=0,V=0,Z=1,d=0,Q=0,n=0,R=0,W=1,e=0,a=0,B=0,i=0,h=1){this.buffer=[F,U,l,t,V,Z,d,Q,n,R,W,e,a,B,i,h]}equals(F){if(this.buffer.length!==F.buffer.length)return!1;if(this.buffer===F.buffer)return!0;for(let U=0;U<this.buffer.length;U++)if(this.buffer[U]!==F.buffer[U])return!1;return!0}multiply(F){const U=this.buffer,l=F.buffer;return new Z(l[0]*U[0]+l[1]*U[4]+l[2]*U[8]+l[3]*U[12],l[0]*U[1]+l[1]*U[5]+l[2]*U[9]+l[3]*U[13],l[0]*U[2]+l[1]*U[6]+l[2]*U[10]+l[3]*U[14],l[0]*U[3]+l[1]*U[7]+l[2]*U[11]+l[3]*U[15],l[4]*U[0]+l[5]*U[4]+l[6]*U[8]+l[7]*U[12],l[4]*U[1]+l[5]*U[5]+l[6]*U[9]+l[7]*U[13],l[4]*U[2]+l[5]*U[6]+l[6]*U[10]+l[7]*U[14],l[4]*U[3]+l[5]*U[7]+l[6]*U[11]+l[7]*U[15],l[8]*U[0]+l[9]*U[4]+l[10]*U[8]+l[11]*U[12],l[8]*U[1]+l[9]*U[5]+l[10]*U[9]+l[11]*U[13],l[8]*U[2]+l[9]*U[6]+l[10]*U[10]+l[11]*U[14],l[8]*U[3]+l[9]*U[7]+l[10]*U[11]+l[11]*U[15],l[12]*U[0]+l[13]*U[4]+l[14]*U[8]+l[15]*U[12],l[12]*U[1]+l[13]*U[5]+l[14]*U[9]+l[15]*U[13],l[12]*U[2]+l[13]*U[6]+l[14]*U[10]+l[15]*U[14],l[12]*U[3]+l[13]*U[7]+l[14]*U[11]+l[15]*U[15])}clone(){const F=this.buffer;return new Z(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8],F[9],F[10],F[11],F[12],F[13],F[14],F[15])}}class d extends t{constructor(l=new F(0,0,-5),t=new U,d=1132,Q=1132,n=.1,R=100){super();const W=()=>{const F=V.RotationFromQuaternion(this.rotation).buffer,U=this.position.flat(),l=[[F[0],F[1],F[2],0],[F[3],F[4],F[5],0],[F[6],F[7],F[8],0],[-U[0]*F[0]-U[1]*F[3]-U[2]*F[6],-U[0]*F[1]-U[1]*F[4]-U[2]*F[7],-U[0]*F[2]-U[1]*F[5]-U[2]*F[8],1]].flat();return new Z(...l)};this.position=l,this.rotation=t,this.fx=d,this.fy=Q,this.near=n,this.far=R,this.projectionMatrix=new Z,this.viewMatrix=new Z,this.viewProj=new Z,this.update=(F,U)=>{this.projectionMatrix=new Z(2*this.fx/F,0,0,0,0,-2*this.fy/U,0,0,0,0,this.far/(this.far-this.near),1,0,0,-this.far*this.near/(this.far-this.near),0),this.viewMatrix=W(),this.viewProj=this.projectionMatrix.multiply(this.viewMatrix)}}}class Q extends l{constructor(){super();const l=new Float32Array(1),t=new Int32Array(l.buffer),Z=F=>{l[0]=F;const U=t[0],V=U>>23&255;let Z,d=8388607&U;return 0==V?Z=0:V<113?(Z=0,d|=8388608,d>>=113-V,16777216&d&&(Z=1,d=0)):V<142?Z=V-112:(Z=31,d=0),(U>>31&1)<<15|Z<<10|d>>13},d=(F,U)=>(Z(F)|Z(U)<<16)>>>0,n={type:"change"};this._data=new Uint32Array(0),this._vertexCount=0,this._width=2048,this._height=0,this._positions=new Float32Array(0),this._rotations=new Float32Array(0),this._scales=new Float32Array(0),this.setData=l=>{this._vertexCount=l.length/Q.RowLength,this._height=Math.ceil(2*this._vertexCount/this._width),this._data=new Uint32Array(this._width*this._height*4),this._positions=new Float32Array(3*this._vertexCount),this._rotations=new Float32Array(4*this._vertexCount),this._scales=new Float32Array(3*this._vertexCount);const t=new Float32Array(l.buffer),Z=new Uint8Array(l.buffer),R=new Uint8Array(this._data.buffer),W=new Float32Array(this._data.buffer);for(let l=0;l<this._vertexCount;l++){this._positions[3*l+0]=t[8*l+0],this._positions[3*l+1]=t[8*l+1],this._positions[3*l+2]=t[8*l+2],this._rotations[4*l+0]=(Z[32*l+28+0]-128)/128,this._rotations[4*l+1]=(Z[32*l+28+1]-128)/128,this._rotations[4*l+2]=(Z[32*l+28+2]-128)/128,this._rotations[4*l+3]=(Z[32*l+28+3]-128)/128,this._scales[3*l+0]=t[8*l+3+0],this._scales[3*l+1]=t[8*l+3+1],this._scales[3*l+2]=t[8*l+3+2],W[8*l+0]=this._positions[3*l+0],W[8*l+1]=this._positions[3*l+1],W[8*l+2]=this._positions[3*l+2],R[4*(8*l+7)+0]=Z[32*l+24+0],R[4*(8*l+7)+1]=Z[32*l+24+1],R[4*(8*l+7)+2]=Z[32*l+24+2],R[4*(8*l+7)+3]=Z[32*l+24+3];const Q=V.RotationFromQuaternion(new U(this._rotations[4*l+1],this._rotations[4*l+2],this._rotations[4*l+3],-this._rotations[4*l+0])),n=V.Diagonal(new F(this._scales[3*l+0],this._scales[3*l+1],this._scales[3*l+2])).multiply(Q).buffer,e=[n[0]*n[0]+n[3]*n[3]+n[6]*n[6],n[0]*n[1]+n[3]*n[4]+n[6]*n[7],n[0]*n[2]+n[3]*n[5]+n[6]*n[8],n[1]*n[1]+n[4]*n[4]+n[7]*n[7],n[1]*n[2]+n[4]*n[5]+n[7]*n[8],n[2]*n[2]+n[5]*n[5]+n[8]*n[8]];this._data[8*l+4]=d(4*e[0],4*e[1]),this._data[8*l+5]=d(4*e[2],4*e[3]),this._data[8*l+6]=d(4*e[4],4*e[5])}this.dispatchEvent(n)},this.translate=F=>{const U=new Float32Array(this._data.buffer);for(let l=0;l<this._vertexCount;l++)this._positions[3*l+0]+=F.x,this._positions[3*l+1]+=F.y,this._positions[3*l+2]+=F.z,U[8*l+0]=this._positions[3*l+0],U[8*l+1]=this._positions[3*l+1],U[8*l+2]=this._positions[3*l+2];this.dispatchEvent(n)},this.rotate=l=>{const t=V.RotationFromQuaternion(l).buffer,Z=new Float32Array(this._data.buffer);for(let Q=0;Q<this._vertexCount;Q++){const n=this._positions[3*Q+0],R=this._positions[3*Q+1],W=this._positions[3*Q+2];this._positions[3*Q+0]=t[0]*n+t[1]*R+t[2]*W,this._positions[3*Q+1]=t[3]*n+t[4]*R+t[5]*W,this._positions[3*Q+2]=t[6]*n+t[7]*R+t[8]*W,Z[8*Q+0]=this._positions[3*Q+0],Z[8*Q+1]=this._positions[3*Q+1],Z[8*Q+2]=this._positions[3*Q+2];const e=new U(this._rotations[4*Q+1],this._rotations[4*Q+2],this._rotations[4*Q+3],this._rotations[4*Q+0]),a=l.multiply(e);this._rotations[4*Q+1]=a.x,this._rotations[4*Q+2]=a.y,this._rotations[4*Q+3]=a.z,this._rotations[4*Q+0]=a.w;const B=V.RotationFromQuaternion(new U(this._rotations[4*Q+1],this._rotations[4*Q+2],this._rotations[4*Q+3],-this._rotations[4*Q+0])),i=V.Diagonal(new F(this._scales[3*Q+0],this._scales[3*Q+1],this._scales[3*Q+2])).multiply(B).buffer,h=[i[0]*i[0]+i[3]*i[3]+i[6]*i[6],i[0]*i[1]+i[3]*i[4]+i[6]*i[7],i[0]*i[2]+i[3]*i[5]+i[6]*i[8],i[1]*i[1]+i[4]*i[4]+i[7]*i[7],i[1]*i[2]+i[4]*i[5]+i[7]*i[8],i[2]*i[2]+i[5]*i[5]+i[8]*i[8]];this._data[8*Q+4]=d(4*h[0],4*h[1]),this._data[8*Q+5]=d(4*h[2],4*h[3]),this._data[8*Q+6]=d(4*h[4],4*h[5])}this.dispatchEvent(n)},this.scale=l=>{const t=new Float32Array(this._data.buffer);for(let Z=0;Z<this.vertexCount;Z++){this._positions[3*Z+0]*=l.x,this._positions[3*Z+1]*=l.y,this._positions[3*Z+2]*=l.z,t[8*Z+0]=this._positions[3*Z+0],t[8*Z+1]=this._positions[3*Z+1],t[8*Z+2]=this._positions[3*Z+2],this._scales[3*Z+0]*=l.x,this._scales[3*Z+1]*=l.y,this._scales[3*Z+2]*=l.z;const Q=V.RotationFromQuaternion(new U(this._rotations[4*Z+1],this._rotations[4*Z+2],this._rotations[4*Z+3],-this._rotations[4*Z+0])),n=V.Diagonal(new F(this._scales[3*Z+0],this._scales[3*Z+1],this._scales[3*Z+2])).multiply(Q).buffer,R=[n[0]*n[0]+n[3]*n[3]+n[6]*n[6],n[0]*n[1]+n[3]*n[4]+n[6]*n[7],n[0]*n[2]+n[3]*n[5]+n[6]*n[8],n[1]*n[1]+n[4]*n[4]+n[7]*n[7],n[1]*n[2]+n[4]*n[5]+n[7]*n[8],n[2]*n[2]+n[5]*n[5]+n[8]*n[8]];this._data[8*Z+4]=d(4*R[0],4*R[1]),this._data[8*Z+5]=d(4*R[2],4*R[3]),this._data[8*Z+6]=d(4*R[4],4*R[5])}this.dispatchEvent(n)},this.limitBox=(F,U,l,t,V,Z)=>{if(F>=U)throw new Error(`xMin (${F}) must be smaller than xMax (${U})`);if(l>=t)throw new Error(`yMin (${l}) must be smaller than yMax (${t})`);if(V>=Z)throw new Error(`zMin (${V}) must be smaller than zMax (${Z})`);const d=new Uint8Array(this._vertexCount);for(let Q=0;Q<this._vertexCount;Q++){const n=this._positions[3*Q+0],R=this._positions[3*Q+1],W=this._positions[3*Q+2];n>=F&&n<=U&&R>=l&&R<=t&&W>=V&&W<=Z&&(d[Q]=1)}let Q=0;for(let F=0;F<this._vertexCount;F++)0!==d[F]&&(this._data[8*Q+0]=this._data[8*F+0],this._data[8*Q+1]=this._data[8*F+1],this._data[8*Q+2]=this._data[8*F+2],this._data[8*Q+3]=this._data[8*F+3],this._data[8*Q+4]=this._data[8*F+4],this._data[8*Q+5]=this._data[8*F+5],this._data[8*Q+6]=this._data[8*F+6],this._data[8*Q+7]=this._data[8*F+7],this._positions[3*Q+0]=this._positions[3*F+0],this._positions[3*Q+1]=this._positions[3*F+1],this._positions[3*Q+2]=this._positions[3*F+2],this._rotations[4*Q+0]=this._rotations[4*F+0],this._rotations[4*Q+1]=this._rotations[4*F+1],this._rotations[4*Q+2]=this._rotations[4*F+2],this._rotations[4*Q+3]=this._rotations[4*F+3],this._scales[3*Q+0]=this._scales[3*F+0],this._scales[3*Q+1]=this._scales[3*F+1],this._scales[3*Q+2]=this._scales[3*F+2],Q+=1);this._height=Math.ceil(2*Q/this._width),this._vertexCount=Q,this._data=new Uint32Array(this._data.buffer,0,this._width*this._height*4),this._positions=new Float32Array(this._positions.buffer,0,3*Q),this._rotations=new Float32Array(this._rotations.buffer,0,4*Q),this._scales=new Float32Array(this._scales.buffer,0,3*Q),this.dispatchEvent(n)},this.saveToFile=F=>{if(!document)return;const U=new Uint8Array(this._vertexCount*Q.RowLength),l=new Float32Array(U.buffer),t=new Uint8Array(U.buffer),V=new Uint8Array(this._data.buffer);for(let F=0;F<this._vertexCount;F++)l[8*F+0]=this._positions[3*F+0],l[8*F+1]=this._positions[3*F+1],l[8*F+2]=this._positions[3*F+2],t[32*F+24+0]=V[4*(8*F+7)+0],t[32*F+24+1]=V[4*(8*F+7)+1],t[32*F+24+2]=V[4*(8*F+7)+2],t[32*F+24+3]=V[4*(8*F+7)+3],l[8*F+3+0]=this._scales[3*F+0],l[8*F+3+1]=this._scales[3*F+1],l[8*F+3+2]=this._scales[3*F+2],t[32*F+28+0]=128*this._rotations[4*F+0]+128&255,t[32*F+28+1]=128*this._rotations[4*F+1]+128&255,t[32*F+28+2]=128*this._rotations[4*F+2]+128&255,t[32*F+28+3]=128*this._rotations[4*F+3]+128&255;const Z=new Blob([U.buffer],{type:"application/octet-stream"}),d=document.createElement("a");d.download=F,d.href=URL.createObjectURL(Z),d.click()}}get data(){return this._data}get vertexCount(){return this._vertexCount}get width(){return this._width}get height(){return this._height}get positions(){return this._positions}get rotations(){return this._rotations}get scales(){return this._scales}}Q.RowLength=32;class n{static async LoadAsync(F,U,l){const t=await fetch(F,{mode:"cors",credentials:"omit"});if(200!=t.status)throw new Error(t.status+" Unable to load "+t.url);const V=t.body.getReader(),Z=parseInt(t.headers.get("content-length")),d=new Uint8Array(Z);let Q=0;for(;;){const{done:F,value:U}=await V.read();if(F)break;d.set(U,Q),Q+=U.length,null==l||l(Q/Z)}U.setData(d)}static async LoadFromFileAsync(F,U,l){const t=new FileReader;t.onload=F=>{const l=new Uint8Array(F.target.result);U.setData(l)},t.onprogress=F=>{null==l||l(F.loaded/F.total)},t.readAsArrayBuffer(F),await new Promise((F=>{t.onloadend=()=>{F()}}))}}class R{static async LoadAsync(F,U,l,t=""){const V=await fetch(F,{mode:"cors",credentials:"omit"});if(200!=V.status)throw new Error(V.status+" Unable to load "+V.url);const Z=V.body.getReader(),d=parseInt(V.headers.get("content-length")),Q=new Uint8Array(d);let n=0;for(;;){const{done:F,value:U}=await Z.read();if(F)break;Q.set(U,n),n+=U.length,null==l||l(n/d)}if(112!==Q[0]||108!==Q[1]||121!==Q[2]||10!==Q[3])throw new Error("Invalid PLY file");const R=new Uint8Array(this._ParsePLYBuffer(Q.buffer,t));U.setData(R)}static async LoadFromFileAsync(F,U,l,t=""){const V=new FileReader;V.onload=F=>{const l=new Uint8Array(this._ParsePLYBuffer(F.target.result,t));U.setData(l)},V.onprogress=F=>{null==l||l(F.loaded/F.total)},V.readAsArrayBuffer(F),await new Promise((F=>{V.onloadend=()=>{F()}}))}static _ParsePLYBuffer(l,t){const V=new Uint8Array(l),Z=(new TextDecoder).decode(V.slice(0,10240)),d="end_header\n",n=Z.indexOf(d);if(n<0)throw new Error("Unable to read .ply file header");const R=parseInt(/element vertex (\d+)\n/.exec(Z)[1]);let W=0;const e={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1},a=[];for(const F of Z.slice(0,n).split("\n").filter((F=>F.startsWith("property ")))){const[U,l,t]=F.split(" ");if(a.push({name:t,type:l,offset:W}),!e[l])throw new Error(`Unsupported property type: ${l}`);W+=e[l]}const B=new DataView(l,n+11),i=new ArrayBuffer(Q.RowLength*R),h=U.FromEuler(new F(Math.PI/2,0,0));for(let F=0;F<R;F++){const l=new Float32Array(i,F*Q.RowLength,3),V=new Float32Array(i,F*Q.RowLength+12,3),Z=new Uint8ClampedArray(i,F*Q.RowLength+24,4),d=new Uint8ClampedArray(i,F*Q.RowLength+28,4);let n=255,R=0,e=0,s=0;a.forEach((U=>{let t;switch(U.type){case"float":t=B.getFloat32(U.offset+F*W,!0);break;case"int":t=B.getInt32(U.offset+F*W,!0);break;default:throw new Error(`Unsupported property type: ${U.type}`)}switch(U.name){case"x":l[0]=t;break;case"y":l[1]=t;break;case"z":l[2]=t;break;case"scale_0":V[0]=Math.exp(t);break;case"scale_1":V[1]=Math.exp(t);break;case"scale_2":V[2]=Math.exp(t);break;case"red":Z[0]=t;break;case"green":Z[1]=t;break;case"blue":Z[2]=t;break;case"f_dc_0":Z[0]=255*(.5+this.SH_C0*t);break;case"f_dc_1":Z[1]=255*(.5+this.SH_C0*t);break;case"f_dc_2":Z[2]=255*(.5+this.SH_C0*t);break;case"f_dc_3":Z[3]=255*(.5+this.SH_C0*t);break;case"opacity":Z[3]=1/(1+Math.exp(-t))*255;break;case"rot_0":n=t;break;case"rot_1":R=t;break;case"rot_2":e=t;break;case"rot_3":s=t}}));let c=new U(R,e,s,n);switch(t){case"polycam":{const F=l[1];l[1]=-l[2],l[2]=F,c=h.multiply(c);break}case"":break;default:throw new Error(`Unsupported format: ${t}`)}c=c.normalize(),d[0]=128*c.w+128,d[1]=128*c.x+128,d[2]=128*c.y+128,d[3]=128*c.z+128}return i}}function W(F,U,l){var t=void 0===U?null:U,V=function(F,U){var l=atob(F);if(U){for(var t=new Uint8Array(l.length),V=0,Z=l.length;V<Z;++V)t[V]=l.charCodeAt(V);return String.fromCharCode.apply(null,new Uint16Array(t.buffer))}return l}(F,void 0!==l&&l),Z=V.indexOf("\n",10)+1,d=V.substring(Z)+(t?"//# sourceMappingURL="+t:""),Q=new Blob([d],{type:"application/javascript"});return URL.createObjectURL(Q)}R.SH_C0=.28209479177387814;var e,a,B,i,h=(e="",a=null,B=!1,function(F){return i=i||W(e,a,B),new Worker(i,F)});class s{constructor(F=1){let U,l,t,V=0,Z=!1;this.init=(F,d)=>{V=0,Z=!0,U=F,l=F.gl.getUniformLocation(d,"u_useDepthFade"),U.gl.uniform1i(l,1),t=F.gl.getUniformLocation(d,"u_depthFade"),U.gl.uniform1f(t,V)},this.render=()=>{Z&&(V=Math.min(V+.01*F,1),V>=1&&(Z=!1,U.gl.uniform1i(l,0)),U.gl.uniform1f(t,V))}}}class c{constructor(F=null,U=null){const l=F||document.createElement("canvas");F||(l.style.display="block",l.style.boxSizing="border-box",l.style.width="100%",l.style.height="100%",l.style.margin="0",l.style.padding="0",document.body.appendChild(l)),l.style.background="#000",this.domElement=l;const t=l.getContext("webgl2",{alpha:!1,depth:!1,stencil:!1,antialias:!1,xrCompatible:!0,premultipliedAlpha:!1});this.gl=t;const V=U||[];let Z,d,Q,n,R,W,e,a,B,i,c,m,b,J;U||V.push(new s);let o=!1;this.resize=()=>{const F=l.clientWidth,U=l.clientHeight;l.width===F&&l.height===U||this.setSize(F,U)},this.setSize=(F,U)=>{l.width=F,l.height=U,d&&(t.viewport(0,0,l.width,l.height),d.update(l.width,l.height),e=t.getUniformLocation(W,"projection"),t.uniformMatrix4fv(e,!1,d.projectionMatrix.buffer),a=t.getUniformLocation(W,"viewport"),t.uniform2fv(a,new Float32Array([l.width,l.height])))};const N=()=>{Q=new h;const F={positions:Z.positions,vertexCount:Z.vertexCount};Q.postMessage({scene:F}),t.viewport(0,0,l.width,l.height),n=t.createShader(t.VERTEX_SHADER),t.shaderSource(n,"#version 300 es\nprecision lowp float;\nprecision lowp int;\n\nuniform highp usampler2D u_texture;\nuniform mat4 projection, view;\nuniform vec2 focal;\nuniform vec2 viewport;\n\n//uniform bool u_useDepthFade;\n//uniform float u_depthFade;\n\nin vec2 position;\nin int index;\n\nout vec4 vColor;\nout vec2 vPosition;\n\nvoid main () {\n    uvec4 cen = texelFetch(u_texture, ivec2((uint(index) & 0x3ffu) << 1, uint(index) >> 10), 0);\n    vec4 cam = view * vec4(uintBitsToFloat(cen.xyz), 1);\n    vec4 pos2d = projection * cam;\n\n    float clip = 1.2 * pos2d.w;\n    if (pos2d.z < -pos2d.w || pos2d.x < -clip || pos2d.x > clip || pos2d.y < -clip || pos2d.y > clip) {\n        gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n        return;\n    }\n\n\n    uvec4 cov = texelFetch(u_texture, ivec2(((uint(index) & 0x3ffu) << 1) | 1u, uint(index) >> 10), 0);\n    vec2 u1 = unpackHalf2x16(cov.x), u2 = unpackHalf2x16(cov.y), u3 = unpackHalf2x16(cov.z);\n    mat3 Vrk = mat3(u1.x, u1.y, u2.x, u1.y, u2.y, u3.x, u2.x, u3.x, u3.y);\n\n    mat3 J = mat3(\n        focal.x / cam.z, 0., -(focal.x * cam.x) / (cam.z * cam.z), \n        0., -focal.y / cam.z, (focal.y * cam.y) / (cam.z * cam.z), \n        0., 0., 0.\n    );\n\n    mat3 T = transpose(mat3(view)) * J;\n    mat3 cov2d = transpose(T) * Vrk * T;\n\n    float mid = (cov2d[0][0] + cov2d[1][1]) / 2.0;\n    float radius = length(vec2((cov2d[0][0] - cov2d[1][1]) / 2.0, cov2d[0][1]));\n    float lambda1 = mid + radius, lambda2 = mid - radius;\n\n    if(lambda2 < 0.0) return;\n    vec2 diagonalVector = normalize(vec2(cov2d[0][1], lambda1 - cov2d[0][0]));\n    vec2 majorAxis = min(sqrt(2.0 * lambda1), 1024.0) * diagonalVector;\n    vec2 minorAxis = min(sqrt(2.0 * lambda2), 1024.0) * vec2(diagonalVector.y, -diagonalVector.x);\n\n    vColor = vec4((cov.w) & 0xffu, (cov.w >> 8) & 0xffu, (cov.w >> 16) & 0xffu, (cov.w >> 24) & 0xffu) / 255.0;\n    vPosition = position;\n\n    float scalingFactor = 1.0;\n\n//    if(u_useDepthFade) {\n//        float depthNorm = (pos2d.z / pos2d.w + 1.0) / 2.0;\n//        float near = 0.1; float far = 100.0;\n//        float normalizedDepth = (2.0 * near) / (far + near - depthNorm * (far - near));\n//        float start = max(normalizedDepth - 0.1, 0.0);\n//        float end = min(normalizedDepth + 0.1, 1.0);\n//        scalingFactor = clamp((u_depthFade - start) / (end - start), 0.0, 1.0);\n//    }\n\n    vec2 vCenter = vec2(pos2d) / pos2d.w;\n    gl_Position = vec4(\n        vCenter \n        + position.x * majorAxis * scalingFactor / viewport \n        + position.y * minorAxis * scalingFactor / viewport, 0.0, 1.0);\n\n}\n"),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS)||console.error(t.getShaderInfoLog(n)),R=t.createShader(t.FRAGMENT_SHADER),t.shaderSource(R,"#version 300 es\nprecision lowp float;\n\nin vec4 vColor;\nin vec2 vPosition;\n\nout vec4 fragColor;\n\nvoid main () {\n    float A = -dot(vPosition, vPosition);\n    if (A < -4.0) discard;\n    float B = exp(A) * vColor.a;\n    fragColor = vec4(B * vColor.rgb, B);\n}\n"),t.compileShader(R),t.getShaderParameter(R,t.COMPILE_STATUS)||console.error(t.getShaderInfoLog(R)),W=t.createProgram(),t.attachShader(W,n),t.attachShader(W,R),t.linkProgram(W),t.useProgram(W),t.getProgramParameter(W,t.LINK_STATUS)||console.error(t.getProgramInfoLog(W)),t.disable(t.DEPTH_TEST),t.enable(t.BLEND),t.blendFuncSeparate(t.ONE_MINUS_DST_ALPHA,t.ONE,t.ONE_MINUS_DST_ALPHA,t.ONE),t.blendEquationSeparate(t.FUNC_ADD,t.FUNC_ADD),d.update(l.width,l.height),e=t.getUniformLocation(W,"projection"),t.uniformMatrix4fv(e,!1,d.projectionMatrix.buffer),a=t.getUniformLocation(W,"viewport"),t.uniform2fv(a,new Float32Array([l.width,l.height])),B=t.getUniformLocation(W,"focal"),t.uniform2fv(B,new Float32Array([d.fx,d.fy])),i=t.getUniformLocation(W,"view"),t.uniformMatrix4fv(i,!1,d.viewMatrix.buffer);const U=new Float32Array([-2,-2,2,-2,2,2,-2,2]);J=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,J),t.bufferData(t.ARRAY_BUFFER,U,t.STATIC_DRAW),m=t.getAttribLocation(W,"position"),t.enableVertexAttribArray(m),t.vertexAttribPointer(m,2,t.FLOAT,!1,0,0);const s=t.createTexture();t.bindTexture(t.TEXTURE_2D,s),c=t.getUniformLocation(W,"u_texture"),t.uniform1i(c,0);const N=t.createBuffer();b=t.getAttribLocation(W,"index"),t.enableVertexAttribArray(b),t.bindBuffer(t.ARRAY_BUFFER,N),t.vertexAttribIPointer(b,1,t.INT,0,0),t.vertexAttribDivisor(b,1),t.bindTexture(t.TEXTURE_2D,s),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.RGBA32UI,Z.width,Z.height,0,t.RGBA_INTEGER,t.UNSIGNED_INT,Z.data),t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,s);for(const F of V)F.init(this,W);Q.onmessage=F=>{if(F.data.depthIndex){const{depthIndex:U}=F.data;t.bindBuffer(t.ARRAY_BUFFER,N),t.bufferData(t.ARRAY_BUFFER,U,t.STATIC_DRAW)}},o=!0},X=()=>{o&&this.dispose(),N()};this.prepareRender=(F,U)=>{F===Z&&U===d||(o&&this.dispose(),d=U,F!==Z&&(Z&&Z.removeEventListener("change",X),Z=F,Z.addEventListener("change",X)),N()),d.update(l.width,l.height)},this.sendCameraToWorker=()=>{Q.postMessage({viewProj:d.viewProj})},this.clearRender=()=>{t.clear(t.COLOR_BUFFER_BIT)},this.render=(F,U)=>{Z.vertexCount>0&&(t.uniformMatrix4fv(e,!1,d.projectionMatrix.buffer),t.uniform2fv(a,new Float32Array([F,U])),t.uniform2fv(B,new Float32Array([d.fx,d.fy])),t.uniformMatrix4fv(i,!1,d.viewMatrix.buffer),t.drawArraysInstanced(t.TRIANGLE_FAN,0,4,Z.vertexCount))},this.dispose=()=>{Q.terminate(),t.deleteShader(n),t.deleteShader(R),t.deleteProgram(W),t.deleteBuffer(J),t.deleteBuffer(undefined),t.deleteBuffer(undefined),t.deleteBuffer(undefined),t.deleteBuffer(undefined),o=!1},this.resize()}}class m{constructor(l,t,Z=.5,d=.5,Q=5,n=!0,R=new F){this.minAngle=-90,this.maxAngle=90,this.minZoom=.1,this.maxZoom=30,this.orbitSpeed=1,this.panSpeed=1,this.zoomSpeed=1,this.dampening=.12,this.setCameraTarget=()=>{},this.attach=()=>{},this.detach=()=>{};let W=R.clone(),e=W.clone(),a=Z,B=d,i=Q,h=!1,s=!1,c=0,m=0,b=0;const J={};let o=null,N=!1;const X=()=>{if(!o||N)return;const U=o.rotation.toEuler();a=-U.y,B=-U.x;const l=o.position.x-i*Math.sin(a)*Math.cos(B),t=o.position.y+i*Math.sin(B),V=o.position.z+i*Math.cos(a)*Math.cos(B);e=new F(l,t,V)};this.attach=F=>{o&&this.detach(),o=F,o.addEventListener("change",X)},this.detach=()=>{o&&(o.removeEventListener("change",X),o=null)},this.attach(l),this.setCameraTarget=U=>{if(!o)return;const l=U.x-o.position.x,t=U.y-o.position.y,V=U.z-o.position.z;i=Math.sqrt(l*l+t*t+V*V),B=Math.atan2(t,Math.sqrt(l*l+V*V)),a=-Math.atan2(l,V),e=new F(U.x,U.y,U.z)};const r=()=>.1+.9*(i-this.minZoom)/(this.maxZoom-this.minZoom),y=F=>{J[F.code]=!0,"ArrowUp"===F.code&&(J.KeyW=!0),"ArrowDown"===F.code&&(J.KeyS=!0),"ArrowLeft"===F.code&&(J.KeyA=!0),"ArrowRight"===F.code&&(J.KeyD=!0)},G=F=>{J[F.code]=!1,"ArrowUp"===F.code&&(J.KeyW=!1),"ArrowDown"===F.code&&(J.KeyS=!1),"ArrowLeft"===F.code&&(J.KeyA=!1),"ArrowRight"===F.code&&(J.KeyD=!1)},p=F=>{C(F),h=!0,s=2===F.button,m=F.clientX,b=F.clientY,window.addEventListener("mouseup",S)},S=F=>{C(F),h=!1,s=!1,window.removeEventListener("mouseup",S)},k=U=>{if(C(U),!h||!o)return;const l=U.clientX-m,t=U.clientY-b;if(s){const U=r(),Z=-l*this.panSpeed*.01*U,d=-t*this.panSpeed*.01*U,Q=V.RotationFromQuaternion(o.rotation).buffer,n=new F(Q[0],Q[3],Q[6]),R=new F(Q[1],Q[4],Q[7]);e=e.add(n.multiply(Z)),e=e.add(R.multiply(d))}else a-=l*this.orbitSpeed*.003,B+=t*this.orbitSpeed*.003,B=Math.min(Math.max(B,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180);m=U.clientX,b=U.clientY},Y=F=>{C(F);const U=r();i+=F.deltaY*this.zoomSpeed*.025*U,i=Math.min(Math.max(i,this.minZoom),this.maxZoom)},T=F=>{if(C(F),1===F.touches.length)h=!0,s=!1,m=F.touches[0].clientX,b=F.touches[0].clientY,c=0;else if(2===F.touches.length){h=!0,s=!0,m=(F.touches[0].clientX+F.touches[1].clientX)/2,b=(F.touches[0].clientY+F.touches[1].clientY)/2;const U=F.touches[0].clientX-F.touches[1].clientX,l=F.touches[0].clientY-F.touches[1].clientY;c=Math.sqrt(U*U+l*l)}},u=F=>{C(F),h=!1,s=!1},I=U=>{if(C(U),h&&o)if(s){const l=r(),t=U.touches[0].clientX-U.touches[1].clientX,Z=U.touches[0].clientY-U.touches[1].clientY,d=Math.sqrt(t*t+Z*Z);i+=(c-d)*this.zoomSpeed*.1*l,i=Math.min(Math.max(i,this.minZoom),this.maxZoom),c=d;const Q=(U.touches[0].clientX+U.touches[1].clientX)/2,n=(U.touches[0].clientY+U.touches[1].clientY)/2,R=Q-m,W=n-b,a=V.RotationFromQuaternion(o.rotation).buffer,B=new F(a[0],a[3],a[6]),h=new F(a[1],a[4],a[7]);e=e.add(B.multiply(-R*this.panSpeed*.025*l)),e=e.add(h.multiply(-W*this.panSpeed*.025*l)),m=Q,b=n}else{const F=U.touches[0].clientX-m,l=U.touches[0].clientY-b;a-=F*this.orbitSpeed*.003,B+=l*this.orbitSpeed*.003,B=Math.min(Math.max(B,this.minAngle*Math.PI/180),this.maxAngle*Math.PI/180),m=U.touches[0].clientX,b=U.touches[0].clientY}},E=(F,U,l)=>(1-l)*F+l*U;this.update=()=>{if(!o)return;N=!0,Z=E(Z,a,this.dampening),d=E(d,B,this.dampening),Q=E(Q,i,this.dampening),W=W.lerp(e,this.dampening);const l=W.x+Q*Math.sin(Z)*Math.cos(d),t=W.y-Q*Math.sin(d),n=W.z-Q*Math.cos(Z)*Math.cos(d);o.position=new F(l,t,n);const R=W.subtract(o.position).normalize(),h=Math.asin(-R.y),s=Math.atan2(R.x,R.z);o.rotation=U.FromEuler(new F(h,s,0));const c=.025,m=.01,b=V.RotationFromQuaternion(o.rotation).buffer,X=new F(-b[2],-b[5],-b[8]),r=new F(b[0],b[3],b[6]);J.KeyS&&(e=e.add(X.multiply(c))),J.KeyW&&(e=e.subtract(X.multiply(c))),J.KeyA&&(e=e.subtract(r.multiply(c))),J.KeyD&&(e=e.add(r.multiply(c))),J.KeyE&&(a+=m),J.KeyQ&&(a-=m),J.KeyR&&(B+=m),J.KeyF&&(B-=m),N=!1};const C=F=>{F.preventDefault(),F.stopPropagation()};this.dispose=()=>{t.removeEventListener("dragenter",C),t.removeEventListener("dragover",C),t.removeEventListener("dragleave",C),t.removeEventListener("contextmenu",C),t.removeEventListener("mousedown",p),t.removeEventListener("mousemove",k),t.removeEventListener("wheel",Y),t.removeEventListener("touchstart",T),t.removeEventListener("touchend",u),t.removeEventListener("touchmove",I),n&&(window.removeEventListener("keydown",y),window.removeEventListener("keyup",G))},n&&(window.addEventListener("keydown",y),window.addEventListener("keyup",G)),t.addEventListener("dragenter",C),t.addEventListener("dragover",C),t.addEventListener("dragleave",C),t.addEventListener("contextmenu",C),t.addEventListener("mousedown",p),t.addEventListener("mousemove",k),t.addEventListener("wheel",Y),t.addEventListener("touchstart",T),t.addEventListener("touchend",u),t.addEventListener("touchmove",I),this.update()}}class b{init(F,U){}render(){}}export{d as Camera,s as FadeInPass,n as Loader,V as Matrix3,Z as Matrix4,m as OrbitControls,R as PLYLoader,U as Quaternion,Q as Scene,b as ShaderPass,F as Vector3,c as WebGLRenderer};
//# sourceMappingURL=index.js.map
